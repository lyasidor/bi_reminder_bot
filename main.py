from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–∞–≥–∏ –¥–ª—è ConversationHandler
SELECT_ACTION, ENTER_TASK_NAME, SELECT_DATE, ENTER_TIME, ENTER_COMMENT, VIEW_TASKS, BACK = range(7)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
tasks = []

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return SELECT_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def action_handler(update: Update, context):
    user_input = update.message.text
    if user_input == "üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return ENTER_TASK_NAME
    elif user_input == "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        if tasks:
            task_buttons = [
                [KeyboardButton(f"{task['time']} | {task['date']}")]
                for task in tasks
            ]
            task_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=reply_markup)
            return VIEW_TASKS
        else:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return SELECT_ACTION

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def enter_task_name(update: Update, context):
    task_name = update.message.text
    context.user_data['task_name'] = task_name
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
    return SELECT_DATE

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
async def select_date(update: Update, context):
    keyboard = [
        [KeyboardButton("25.04.2025"), KeyboardButton("26.04.2025"), KeyboardButton("27.04.2025")],
        [KeyboardButton("28.04.2025"), KeyboardButton("29.04.2025"), KeyboardButton("30.04.2025")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return ENTER_TIME

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
async def enter_time(update: Update, context):
    user_input = update.message.text
    if ":" in user_input and len(user_input.split(":")) == 2:
        context.user_data['task_time'] = user_input
        await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return ENTER_COMMENT
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú'.")

# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def enter_comment(update: Update, context):
    user_input = update.message.text
    if user_input.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['task_comment'] = None
    else:
        context.user_data['task_comment'] = user_input

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    task = {
        'name': context.user_data['task_name'],
        'date': context.user_data['task_date'],
        'time': context.user_data['task_time'],
        'comment': context.user_data.get('task_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
    }
    tasks.append(task)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    keyboard = [
        [KeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return SELECT_ACTION

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
async def view_tasks(update: Update, context):
    task_buttons = [
        [KeyboardButton(f"{task['time']} | {task['date']}")]
        for task in tasks
    ]
    task_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)
    return VIEW_TASKS

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def delete_task(update: Update, context):
    user_input = update.message.text
    task_to_delete = None
    for task in tasks:
        if f"{task['time']} | {task['date']}" == user_input:
            task_to_delete = task
            break

    if task_to_delete:
        tasks.remove(task_to_delete)
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    return VIEW_TASKS

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(update: Update, context):
    keyboard = [
        [KeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return SELECT_ACTION

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("YOUR_BOT_API_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.TEXT, action_handler)],
        states={
            SELECT_ACTION: [MessageHandler(filters.TEXT, action_handler)],
            ENTER_TASK_NAME: [MessageHandler(filters.TEXT, enter_task_name)],
            SELECT_DATE: [MessageHandler(filters.TEXT, select_date)],
            ENTER_TIME: [MessageHandler(filters.TEXT, enter_time)],
            ENTER_COMMENT: [MessageHandler(filters.TEXT, enter_comment)],
            VIEW_TASKS: [MessageHandler(filters.TEXT, view_tasks)],
            BACK: [MessageHandler(filters.TEXT, back_to_main_menu)],
        },
        fallbacks=[MessageHandler(filters.TEXT, back_to_main_menu)],
    )

    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
