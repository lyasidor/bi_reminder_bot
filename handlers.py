from telegram import ReplyKeyboardMarkup, Update, KeyboardButton
from telegram.ext import ConversationHandler, CallbackContext, CommandHandler, MessageHandler, filters
from task_manager import TaskManager
from datetime import datetime, timedelta
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_TASK, ENTER_DATE, ENTER_TIME, ENTER_COMMENT = range(4)

task_manager = TaskManager()

def start(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úçÔ∏è"), KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã")],
        ], one_time_keyboard=True)
    )
    return ADD_TASK

def handle_button_click(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()

    if query.data == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úçÔ∏è":
        return add_task(update, context)
    elif query.data == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã":
        return show_task_list(update, context)

def add_task(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return ENTER_DATE

def handle_text(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text
    if context.user_data.get('task_name') is None:
        context.user_data['task_name'] = user_input
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏:", reply_markup=get_date_buttons())
        return ENTER_TIME
    elif context.user_data.get('task_date') is None:
        context.user_data['task_date'] = user_input
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú':")
        return ENTER_COMMENT
    elif context.user_data.get('task_time') is None:
        context.user_data['task_time'] = user_input
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
        return ENTER_COMMENT
    else:
        context.user_data['task_comment'] = user_input
        task_manager.add_task(context.user_data)
        update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                                  reply_markup=ReplyKeyboardMarkup([
                                      [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úçÔ∏è"), KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã")]
                                  ], one_time_keyboard=True))
        return ConversationHandler.END

def get_date_buttons():
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏
    today = datetime.today()
    buttons = []
    for i in range(14):  # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
        date_str = (today + timedelta(days=i)).strftime("%d.%m.%Y")
        buttons.append([KeyboardButton(date_str)])
    
    return ReplyKeyboardMarkup(buttons, one_time_keyboard=True)

def show_task_list(update: Update, context: CallbackContext) -> int:
    task_list = task_manager.get_task_list()
    if not task_list:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
    task_buttons = []
    for idx, task in enumerate(task_list):
        task_buttons.append([KeyboardButton(f"{task['time']}, {task['date']}")])
    
    update.message.reply_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardMarkup(task_buttons))
    return ADD_TASK

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        ADD_TASK: [MessageHandler(filters.TEXT, handle_button_click)],
        ENTER_DATE: [MessageHandler(filters.TEXT, handle_text)],
        ENTER_TIME: [MessageHandler(filters.TEXT, handle_text)],
        ENTER_COMMENT: [MessageHandler(filters.TEXT, handle_text)],
    },
    fallbacks=[CommandHandler('start', start)],
)