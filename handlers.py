from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

tasks = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
MAX_TASKS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á

def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù", callback_data='add_task')],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã", callback_data='show_tasks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

def add_task(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)

def save_task(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    context.user_data['task_name'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("25.04.2025", callback_data='2025-04-25')],
        [InlineKeyboardButton("26.04.2025", callback_data='2025-04-26')],
        [InlineKeyboardButton("27.04.2025", callback_data='2025-04-27')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)

def set_time(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    context.user_data['task_date'] = update.callback_query.data
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.", reply_markup=reply_markup)

def save_time(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    context.user_data['task_time'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ:", reply_markup=reply_markup)

def save_comment(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫"""
    if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['task_comment'] = update.message.text
    task = {
        'name': context.user_data['task_name'],
        'date': context.user_data['task_date'],
        'time': context.user_data['task_time'],
        'comment': context.user_data.get('task_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
    }
    if len(tasks) < MAX_TASKS:
        tasks.append(task)
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù", callback_data='add_task')],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã", callback_data='show_tasks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.", reply_markup=reply_markup)

def show_tasks(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    if not tasks:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    keyboard = []
    for task in tasks:
        task_str = f"{task['time']}, {task['date']}"
        keyboard.append([InlineKeyboardButton(task_str, callback_data=f"task_{task_str}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:", reply_markup=reply_markup)

def task_details(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ"""
    task_str = update.callback_query.data.split('_')[1]
    task = next((t for t in tasks if f"{t['time']}, {t['date']}" == task_str), None)
    if task:
        task_info = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task['name']} üìù\n"
            f"–î–∞—Ç–∞: {task['date']} üìÖ\n"
            f"–í—Ä–µ–º—è: {task['time']} üïí\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {task['comment']}"
        )
        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóëÔ∏è", callback_data=f"delete_{task_str}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.callback_query.message.reply_text(task_info, reply_markup=reply_markup)

def delete_task(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    task_str = update.callback_query.data.split('_')[1]
    task = next((t for t in tasks if f"{t['time']}, {t['date']}" == task_str), None)
    if task:
        tasks.remove(task)
    show_tasks(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è

    if query.data == 'add_task':
        add_task(update, context)
    elif query.data == 'show_tasks':
        show_tasks(update, context)
    elif query.data == 'back':
        start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    elif query.data.startswith('task_'):
        task_details(update, context)
    elif query.data.startswith('delete_'):
        delete_task(update, context)