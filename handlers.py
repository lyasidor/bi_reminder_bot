from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from database import add_task_to_db, get_tasks_from_db, delete_task_from_db, get_task_by_id
from datetime import datetime, timedelta

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
async def start(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="show_tasks")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )
    return 0

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def add_task(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."
    )
    return 1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def task_name(update: Update, context: CallbackContext) -> int:
    context.user_data['task_name'] = update.message.text
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    today = datetime.today()
    dates = [today + timedelta(days=i) for i in range(14)]
    keyboard = [[InlineKeyboardButton(date.strftime('%d.%m.%Y'), callback_data=f"date_{date.strftime('%d.%m.%Y')}") for date in dates[i:i+3]] for i in range(0, len(dates), 3)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
    return 2

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
async def task_date(update: Update, context: CallbackContext) -> int:
    context.user_data['task_date'] = update.message.text
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú)."
    )
    return 3

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
async def task_time(update: Update, context: CallbackContext) -> int:
    try:
        time_input = update.message.text
        hour, minute = map(int, time_input.split(":"))
        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError
        context.user_data['task_time'] = time_input
        await update.message.reply_text(
            "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
        return 4
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú).")
        return 3

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def task_comment(update: Update, context: CallbackContext) -> int:
    context.user_data['task_comment'] = update.message.text if update.message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    add_task_to_db(context.user_data['task_name'], context.user_data['task_date'], context.user_data['task_time'], context.user_data.get('task_comment'))
    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return 0

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
async def show_tasks(update: Update, context: CallbackContext) -> int:
    tasks = get_tasks_from_db()
    keyboard = [
        [InlineKeyboardButton(f"{task['name']} - {task['date']} - {task['time']}", callback_data=f"task_details_{task['id']}") for task in tasks]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=reply_markup)
    return 0

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
async def task_details(update: Update, context: CallbackContext) -> int:
    task_id = update.callback_query.data.split("_")[2]
    task = get_task_by_id(task_id)
    details = f"–ó–∞–¥–∞—á–∞: {task['name']}\n–î–∞—Ç–∞: {task['date']}\n–í—Ä–µ–º—è: {task['time']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {task['comment'] if task['comment'] else '–ù–µ—Ç'}"
    keyboard = [
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_task_{task['id']}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_tasks")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(details, reply_markup=reply_markup)
    return 0

# –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
async def delete_task(update: Update, context: CallbackContext) -> int:
    task_id = update.callback_query.data.split("_")[2]
    delete_task_from_db(task_id)
    await update.callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    return 0