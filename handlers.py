import tasks
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ConversationHandler, CommandHandler, MessageHandler, filters, ContextTypes
)
from keyboards import start_markup, generate_date_keyboard, back_markup, skip_or_back_markup
from states import States
from tasks import create_task, get_user_tasks, delete_task, get_task_by_id

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=start_markup())
    return ConversationHandler.END

async def start_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id] = {"history": []}
    await update.message.reply_text("–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏—à—å?", reply_markup=back_markup())
    return States.TASK_NAME

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=start_markup)
        return
    message = "\n".join([f"{i}. {t['task_name']} ‚Äî {t['task_date']} {t['task_time']}" for i, t in tasks.items()])
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n" + message, reply_markup=start_markup)

async def task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    context.user_data["task_name"] = text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup=generate_date_keyboard())
    return States.DATE

async def task_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏—à—å?", reply_markup=back_markup())
        return States.TASK_NAME
    context.user_data["task_date"] = text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:24)", reply_markup=back_markup())
    return States.TIME

async def task_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup=generate_date_keyboard())
        return States.DATE
    if not text or not validate_time_format(text):
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        return States.TIME
    context.user_data["task_time"] = text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è —è –¥–æ–ª–∂–µ–Ω —Ç–µ–±—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å", reply_markup=back_markup())
    return States.REMINDER_MINUTES

async def task_minutes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:24)", reply_markup=back_markup())
        return States.TIME
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
        return States.REMINDER_MINUTES
    context.user_data["reminder_minutes"] = int(text)
    await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=skip_or_back_markup())
    return States.COMMENT

async def task_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è —è –¥–æ–ª–∂–µ–Ω —Ç–µ–±—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å", reply_markup=back_markup())
        return States.REMINDER_MINUTES
    context.user_data["comment"] = None if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    user_id = update.effective_user.id
    create_task(user_id, context.user_data)

    await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=start_markup())
    return ConversationHandler.END

async def task_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_user_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=start_markup())
        return ConversationHandler.END

    reply = "–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
    keyboard = []
    row = []

    for i, task in enumerate(tasks[:10], 1):
        btn = f"{i}. {task['name']}"
        row.append(btn)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append(["üîô –ù–∞–∑–∞–¥"])

    context.user_data["tasks"] = tasks
    await update.message.reply_text(reply, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return States.TASK_VIEW

async def task_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    
    if not text[0].isdigit():
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return States.TASK_VIEW

    index = int(text.split(".")[0]) - 1
    task = context.user_data["tasks"][index]
    context.user_data["current_task"] = task

    reply = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task['name']}\n"
        f"{task['date']}, {task['time']}\n\n"
        f"{task.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
    )
    keyboard = [["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"], ["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(reply, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return States.TASK_ACTION

async def task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        return await task_list(update, context)

    if text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        delete_task(update.effective_user.id, context.user_data["current_task"])
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=start_markup())
        return ConversationHandler.END

def validate_time_format(time_str):
    try:
        hours, minutes = map(int, time_str.split(":"))
        return 0 <= hours < 24 and 0 <= minutes < 60
    except:
        return False

def get_conv_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), start_add_task),
            MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á$"), task_list)
        ],
        states={
            States.TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_name)],
            States.DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_date)],
            States.TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_time)],
            States.REMINDER_MINUTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_minutes)],
            States.COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_comment)],
            States.TASK_VIEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_view)],
            States.TASK_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_action)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
