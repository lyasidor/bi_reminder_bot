from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext
from utils import send_message_with_retry
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_progress = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_progress:
        del user_progress[user_id]

    try:
        await send_message_with_retry(context.bot, user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–±—Ä–æ—Å–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ"), KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    try:
        await send_message_with_retry(context.bot, user_id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /help: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
async def add_task(update: Update, context: CallbackContext):
    user_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if user_id not in user_progress:
        user_progress[user_id] = {}

    try:
        user_progress[user_id]['step'] = 'enter_task_name'
        await send_message_with_retry(context.bot, user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
async def list_tasks(update: Update, context: CallbackContext):
    user_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á
    if user_id not in user_progress or 'tasks' not in user_progress[user_id] or len(user_progress[user_id]['tasks']) == 0:
        await send_message_with_retry(context.bot, user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.")
    else:
        tasks = user_progress[user_id]['tasks']
        task_list = "\n".join([f"{task['name']} - {task['time']}" for task in tasks])
        await send_message_with_retry(context.bot, user_id, f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏)
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.chat_id

    if user_id not in user_progress:
        user_progress[user_id] = {}

    step = user_progress[user_id].get('step')

    if step == 'enter_task_name':
        task_name = update.message.text
        user_progress[user_id]['task_name'] = task_name
        user_progress[user_id]['step'] = 'enter_task_date'
        await send_message_with_retry(context.bot, user_id, f"–ó–∞–¥–∞—á–∞ '{task_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É:")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        keyboard = [
            [KeyboardButton("25.04.2025"), KeyboardButton("26.04.2025"), KeyboardButton("27.04.2025")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

    elif step == 'enter_task_date':
        selected_date = update.message.text
        user_progress[user_id]['date'] = selected_date
        user_progress[user_id]['step'] = 'enter_task_time'
        await send_message_with_retry(context.bot, user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú'.")

    elif step == 'enter_task_time':
        task_time = update.message.text
        user_progress[user_id]['time'] = task_time
        user_progress[user_id]['step'] = 'enter_task_comment'
        await send_message_with_retry(context.bot, user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è {task_time}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")

    elif step == 'enter_task_comment':
        task_comment = update.message.text
        user_progress[user_id]['comment'] = task_comment
        user_progress[user_id]['step'] = 'task_added'

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        if 'tasks' not in user_progress[user_id]:
            user_progress[user_id]['tasks'] = []

        user_progress[user_id]['tasks'].append({
            'name': user_progress[user_id]['task_name'],
            'date': user_progress[user_id]['date'],
            'time': user_progress[user_id]['time'],
            'comment': user_progress[user_id].get('comment', '')
        })

        await send_message_with_retry(context.bot, user_id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        user_progress[user_id] = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def handle_button_click(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    button_text = update.message.text

    if button_text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ":
        await add_task(update, context)
    elif button_text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã":
        await list_tasks(update, context)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
start_handler = CommandHandler("start", start)
help_handler = CommandHandler("help", help_command)
add_task_handler = MessageHandler(filters.TEXT & filters.Regex("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ"), handle_button_click)
list_tasks_handler = MessageHandler(filters.TEXT & filters.Regex("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã"), handle_button_click)
message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
