from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters
from tasks import tasks, get_new_task_id, get_local_time, generate_date_keyboard, get_timezone_by_location
from scheduler import plan_reminder

TASK_NAME, DATE, TIME, REMINDER, COMMENT = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
    return TASK_NAME

async def task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_name'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:", reply_markup=generate_date_keyboard())
    return DATE

async def task_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_date'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    return TIME

async def task_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from datetime import datetime
    import pytz

    time_input = update.message.text.strip()
    user_date = context.user_data['task_date']
    user = update.effective_user

    task_datetime = datetime.strptime(f"{user_date} {time_input}", "%d-%m-%Y %H:%M")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —é–∑–µ—Ä–∞ (–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ú–æ—Å–∫–≤–∞)
    user_timezone = pytz.timezone("Europe/Moscow")
    now = datetime.now(user_timezone)

    if task_datetime < now:
        await update.message.reply_text("–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.")
        return TIME

    context.user_data['task_time'] = time_input
    context.user_data['task_datetime'] = user_timezone.localize(task_datetime)
    await update.message.reply_text("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
    return REMINDER

async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        minutes = int(update.message.text)
        context.user_data['reminder_time'] = minutes
        await update.message.reply_text("–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return COMMENT
    except ValueError:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Ü–∏—Ñ—Ä–æ–π.")
        return REMINDER

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_comment'] = update.message.text if update.message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
    task_id = get_new_task_id()
    context.user_data['user_id'] = update.effective_user.id
    tasks[task_id] = context.user_data.copy()
    plan_reminder(task_id)
    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def list_tasks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_tasks = [t for t in tasks.values() if t['user_id'] == user_id]

    if not user_tasks:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for t in user_tasks:
        response += f"üìå {t['task_name']} ‚Äî {t['task_datetime'].strftime('%d-%m-%Y %H:%M')}\n"

    await update.message.reply_text(response)

def get_conv_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_name)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_time)],
            REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, reminder)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
        },
        fallbacks=[],
    )
